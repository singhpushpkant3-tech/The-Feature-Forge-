import streamlit as st
import pandas as pd
import plotly.express as px
import os

# ---- Page Config ----
st.set_page_config(page_title="India COVID-19 Dashboard", layout="wide")
st.title("üáÆüá≥ India COVID-19 Dashboard")
st.caption("Data Source: MoHFW & covid19india.org")

DATA_DIR = "./"

# ---- Load Data ----
@st.cache_data
def load_data():
    def safe_read(filename, parse_dates=None):
        try:
            return pd.read_csv(os.path.join(DATA_DIR, filename), parse_dates=parse_dates)
        except Exception as e:
            st.warning(f"‚ö†Ô∏è Could not load {filename}: {e}")
            return pd.DataFrame()

    df_nation = safe_read("nation_level_daily.csv", parse_dates=["Date"])
    df_state_latest = safe_read("state_level_latest.csv")
    df_state_daily = safe_read("complete.csv", parse_dates=["Date"])
    df_district_latest = safe_read("district_level_latest.csv")
    return df_nation, df_state_latest, df_state_daily, df_district_latest


df_nation, df_state_latest, df_state_daily, df_district_latest = load_data()


# ---- Helper Function ----
def get_column(df, possible_names):
    """Return first matching column from a list."""
    for name in possible_names:
        if name in df.columns:
            return name
    return None


# ---- NATIONAL OVERVIEW ----
st.header("National Level Overview")

if not df_nation.empty:
    df_nation.columns = df_nation.columns.str.strip()
    st.write("üßæ Available columns in national data:", df_nation.columns.tolist())

    col_confirmed = get_column(df_nation, ["Total Confirmed", "Total Confirmed cases", "Confirmed", "Total Cases"])
    col_deaths = get_column(df_nation, ["Total Deceased", "Death", "Deaths", "Total Deaths"])
    col_recovered = get_column(df_nation, ["Total Recovered", "Cured/Discharged/Migrated", "Recovered", "Cured"])

    if col_confirmed and col_deaths and col_recovered:
        total_cases = int(df_nation[col_confirmed].iloc[-1])
        total_deaths = int(df_nation[col_deaths].iloc[-1])
        total_recovered = int(df_nation[col_recovered].iloc[-1])

        c1, c2, c3 = st.columns(3)
        c1.metric("Total Cases (India)", f"{total_cases:,}")
        c2.metric("Total Deaths (India)", f"{total_deaths:,}")
        c3.metric("Total Recovered (India)", f"{total_recovered:,}")

        st.subheader("Nation-Level Trend")
        fig = px.line(
            df_nation,
            x="Date",
            y=[col_confirmed, col_recovered, col_deaths],
            title="India: National Daily Trends"
        )
        st.plotly_chart(fig, use_container_width=True)
    else:
        st.warning("‚ö†Ô∏è Could not match expected column names in national data.")
else:
    st.warning("No national-level data found.")


# ---- STATE LEVEL SNAPSHOT ----
st.header("State Level Snapshot")

if not df_state_latest.empty and not df_state_daily.empty:
    df_state_latest.columns = df_state_latest.columns.str.strip()
    df_state_daily.columns = df_state_daily.columns.str.strip()

    state_col_latest = get_column(df_state_latest, ["State", "State/UT", "Name of State / UT"])
    state_col_daily = get_column(df_state_daily, ["State", "State/UT", "Name of State / UT"])

    if state_col_latest and state_col_daily:
        state_choice = st.selectbox("Select State", options=df_state_latest[state_col_latest].unique())
        state_data = df_state_daily[df_state_daily[state_col_daily] == state_choice]

        if not state_data.empty:
            st.write(f"**Latest Data for {state_choice}:**")

            col_confirmed_s = get_column(state_data, ["Total Confirmed cases", "Confirmed"])
            col_deaths_s = get_column(state_data, ["Death", "Deaths"])
            col_recovered_s = get_column(state_data, ["Cured/Discharged/Migrated", "Recovered"])

            if col_confirmed_s and col_deaths_s and col_recovered_s:
                latest_state = state_data.iloc[-1]
                s1, s2, s3 = st.columns(3)
                s1.metric("Confirmed", int(latest_state[col_confirmed_s]))
                s2.metric("Deaths", int(latest_state[col_deaths_s]))
                s3.metric("Recovered", int(latest_state[col_recovered_s]))

                # Ensure numeric for plotting
                for col in [col_confirmed_s, col_deaths_s, col_recovered_s]:
                    state_data[col] = pd.to_numeric(state_data[col], errors="coerce")

                # Drop rows where all three are NaN
                state_data = state_data.dropna(subset=[col_confirmed_s, col_deaths_s, col_recovered_s], how="all")

                # Plot safely
                fig_state = px.line(
                    state_data,
                    x="Date",
                    y=[col_confirmed_s, col_deaths_s, col_recovered_s],
                    title=f"{state_choice}: Daily Trend"
                )
                st.plotly_chart(fig_state, use_container_width=True)
            else:
                st.warning(f"Missing data columns for {state_choice}. Found: {state_data.columns.tolist()}")
        else:
            st.warning(f"No data found for {state_choice}.")
    else:
        st.warning("‚ö†Ô∏è Could not find state column in state-level CSVs.")
else:
    st.warning("State-level data not available or incomplete.")


# ---- DISTRICT LEVEL MAP ----
if not df_state_daily.empty:
    if {'Latitude', 'Longitude'}.issubset(df_state_daily.columns):
        st.header("District-wise Latest Map")

        col_confirmed_d = get_column(df_state_daily, ["Total Confirmed cases", "Confirmed"])
        if col_confirmed_d:
            fig_map = px.scatter_geo(
                df_state_daily,
                lat="Latitude",
                lon="Longitude",
                scope="asia",
                hover_name=state_col_daily,
                hover_data=[col_confirmed_d],
                size=col_confirmed_d,
                color=col_confirmed_d,
                title="District-wise Latest Confirmed Cases",
                color_continuous_scale="reds"
            )
            st.plotly_chart(fig_map, use_container_width=True)
        else:
            st.warning("No valid 'Confirmed' column found for map.")
    else:
        st.warning("No Latitude/Longitude columns available for map.")
else:
    st.warning("No district-level or state map data available.")


# ---- RAW DATA ----
if st.checkbox("Show Raw Data"):
    st.subheader("Nation-Level Raw Data")
    st.write(df_nation.head())
    st.subheader("State-Level Latest Data")
    st.write(df_state_latest.head())
    st.subheader("State-Level Daily Data")
    st.write(df_state_daily.head())

